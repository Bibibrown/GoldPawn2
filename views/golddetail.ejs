<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ประวัติทองที่จำนำ</title>
    <link rel='stylesheet' href="/bootstrap/css/bootstrap.min.css" />
    <script src="/bootstrap/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Mitr:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        *{
            font-family: "Mitr", sans-serif;
            font-weight: 400;
            font-style: normal;
        }
    </style>
</head>
<body>
    <%- include('./partials/nav.ejs') %>

    

    <div class="container" style="margin-top: 7.7%;">
        <h2>ประวัติการชำระของทอง ID: <%= gold.goldId %></h2>

        <!-- Table for Payment History -->
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>วันที่ชำระ</th>
                    <th>วันที่เริ่มต้น</th>
                    <th>กำหนดชำระครั้งถัดไป</th>
                    <th>เงินต้น (บาท)</th>
                    <th>ดอกเบี้ยต่อเดือน (บาท)</th>
                    <th>จำนวนเงินที่ชำระ (บาท)</th>
                    <th>ประเภทการชำระ</th>
                </tr>
            </thead>
            <tbody>
                <% if (payments.length === 0) { %>
                    <tr>
                        <td colspan="7" class="text-center">ไม่มีประวัติการชำระเงิน</td>
                    </tr>
                <% } else { %>
                    <% payments.forEach(payment => { %>
                        <tr>
                            <td><%= new Date(payment.paymentDate).toLocaleDateString('th-TH') %></td>
                            <td><%= new Date(payment.startDate).toLocaleDateString('th-TH') %></td>
                            <td><%= new Date(payment.nextDueDate).toLocaleDateString('th-TH') %></td>
                            <td><%= gold.principal.toLocaleString('th-TH') %></td>
                            <td><%= gold.intperm.toLocaleString('th-TH') %></td>
                            <td><%= payment.totalPayment.toLocaleString('th-TH') %></td>
                            <td class="gold-status" data-gold-id="<%= gold._id %>"><%= gold.status %></td>
                        </tr>
                    <% }); %>
                <% } %>
            </tbody>
        </table>

        <!-- Action Buttons -->
        <div class="d-flex justify-content-end">
            <button id="extendButton" class="btn btn-outline-secondary me-2" data-bs-toggle="modal" data-bs-target="#extendPaymentModal" 
                    data-payment-id="<%= gold.goldId %>">
                ต่อดอก
            </button>
            <button id="redeemButton" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#redeemModal" data-gold-id="<%= gold.goldId %>">ไถ่คืน</button>
        </div>

    </div>

    <!-- Modal for "ต่อดอก" -->
    <div class="modal fade" id="extendPaymentModal" tabindex="-1" aria-labelledby="extendPaymentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="extendPaymentModalLabel">ต่อดอก</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="extendPaymentForm">
                        <div class="mb-3 row">
                            <label for="startDate" class="col-sm-4 col-form-label">วันที่เริ่มต้น</label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" id="startDate" name="startDate" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="endDate" class="col-sm-4 col-form-label">วันที่สิ้นสุด</label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" id="endDate" name="endDate" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="nextDueDate" class="col-sm-4 col-form-label">กำหนดครั้งถัดไป</label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" id="nextDueDate" name="nextDueDate" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="amount" class="col-sm-4 col-form-label">เงินที่ชำระ (บาท)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" id="amount" name="amount" readonly>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="confirmExtend">ยืนยัน</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for "ไถ่คืน" -->
    <div class="modal fade" id="redeemModal" tabindex="-1" aria-labelledby="redeemModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="redeemModalLabel">ไถ่คืน</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="redeemForm">
                        <div class="mb-3 row">
                            <label for="redeemStartDate" class="col-sm-4 col-form-label">วันที่เริ่มต้น</label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" id="redeemStartDate" name="redeemStartDate" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="redeemEndDate" class="col-sm-4 col-form-label">วันที่สิ้นสุด</label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control" id="redeemEndDate" name="redeemEndDate">
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="initialAmount" class="col-sm-4 col-form-label">เงินต้น (บาท)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" id="initialAmount" name="initialAmount" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="interestAmount" class="col-sm-4 col-form-label">ดอกเบี้ย (%)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" id="interestAmount" name="interestAmount" readonly>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label for="totalAmount" class="col-sm-4 col-form-label">เงินสุทธิ (บาท)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" id="totalAmount" name="totalAmount" readonly>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success">ยืนยัน</button>
                </div>
            </div>
        </div>
    </div>

    <footer class="mt-5"></footer>

    <script>   
        let goldId = '<%= gold._id %>'; 

        document.addEventListener('DOMContentLoaded', function() {
            const extendPaymentModal = document.getElementById('extendPaymentModal');
            const extendPaymentForm = document.getElementById('extendPaymentForm');
            const confirmExtendButton = document.getElementById('confirmExtend');
            let initialDuration;

                   // เพิ่มฟังก์ชันใหม่นี้เพื่อตรวจสอบและอัปเดตสถานะทอง
            function checkAndUpdateGoldStatus() {
                console.log('เริ่มตรวจสอบสถานะทอง, goldId:', goldId);
                if (!goldId) {
                    console.error('goldId เป็นค่า null หรือ undefined');
                    return;
                }

                fetch(`/payment/check-status/${goldId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('ผลลัพธ์การตรวจสอบสถานะ:', data);
                        if (data.success) {
                            updateGoldInfo(data);
                            if (data.statusChanged) {
                                console.log('สถานะเปลี่ยนแปลง, อัปเดตหน้า');
                                handleStatusChange(data.currentStatus, data.lastPaymentDate, data.nextDueDate);
                            } else {
                                console.log('ไม่มีการเปลี่ยนแปลงสถานะ');
                            }
                        } else {
                            console.error('ไม่สามารถตรวจสอบสถานะทองได้:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('เกิดข้อผิดพลาดในการตรวจสอบสถานะทอง:', error);
                    });
            }

            function updateGoldInfo(data) {
                // อัปเดตข้อมูลทองในหน้าเว็บ
                document.getElementById('pawnId').textContent = data.pawnId;
                document.getElementById('typeName').textContent = data.typeName;
                document.getElementById('weight').textContent = data.weight;
                document.getElementById('principal').textContent = data.principal.toLocaleString('th-TH');
                document.getElementById('interest').textContent = data.interest;
                document.getElementById('intperm').textContent = data.intperm.toLocaleString('th-TH');
                document.getElementById('status').textContent = data.currentStatus;

                // อัปเดตข้อมูลการชำระเงินล่าสุด
                document.getElementById('lastPaymentDate').textContent = new Date(data.lastPaymentDate).toLocaleDateString('th-TH');
                document.getElementById('nextDueDate').textContent = new Date(data.nextDueDate).toLocaleDateString('th-TH');
            }

            function handleStatusChange(newStatus, lastPaymentDate, nextDueDate) {
                console.log('กำลังจัดการการเปลี่ยนแปลงสถานะเป็น:', newStatus);
                
                if (newStatus === 'หลุดจำนำ') {
                    // ซ่อนปุ่มหรือฟอร์มที่เกี่ยวข้องกับการชำระเงิน
                    const paymentElements = document.getElementsByClassName('payment-related');
                    for (let element of paymentElements) {
                        element.style.display = 'none';
                    }

                    // แสดง alert
                    const lastPaymentDateThai = new Date(lastPaymentDate).toLocaleDateString('th-TH');
                    const nextDueDateThai = new Date(nextDueDate).toLocaleDateString('th-TH');
                    alert(`ทองได้หลุดจำนำแล้ว\nวันที่ชำระครั้งสุดท้าย: ${lastPaymentDateThai}\nวันครบกำหนดชำระล่าสุด: ${nextDueDateThai}`);
                }

                console.log('จัดการการเปลี่ยนแปลงสถานะเสร็จสิ้น');
            }

            // เรียกใช้ฟังก์ชันเมื่อโหลดหน้า
            document.addEventListener('DOMContentLoaded', checkAndUpdateGoldStatus);
            // เมื่อ modal เปิด
            extendPaymentModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                goldId = button.getAttribute('data-payment-id');
                console.log('goldId:', goldId);
                
                if (!goldId) {
                    console.error('goldId is null or undefined');
                    return;
                }
                
                fetch(`/payment/gold/${goldId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('API response:', data);
                        const today = new Date();
                        const startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1); // วันที่กดต่อดอก + 1 วัน
                        
                        // คำนวณ initialDuration
                        if (data.nextDueDate && data.startDate) {
                            const nextDueDate = new Date(data.nextDueDate);
                            const originalStartDate = new Date(data.startDate);
                            initialDuration = nextDueDate.getTime() - originalStartDate.getTime();
                        } else {
                            console.warn('Unable to calculate initialDuration, using default value');
                            initialDuration = 30 * 24 * 60 * 60 * 1000; // 30 วัน
                        }
                        
                        console.log('Calculated initialDuration:', initialDuration);
                        
                        if (isNaN(initialDuration) || initialDuration <= 0) {
                            console.warn('Invalid initialDuration, using default value');
                            initialDuration = 30 * 24 * 60 * 60 * 1000; // 30 วัน
                        }
                        
                        const endDate = new Date(startDate.getTime() + initialDuration);
                        const nextDueDate = new Date(endDate.getTime() + 24 * 60 * 60 * 1000); // endDate + 1 วัน

                        const startDateInput = document.getElementById('startDate');
                        const endDateInput = document.getElementById('endDate');
                        const amountInput = document.getElementById('amount');
                        const nextDueDateInput = document.getElementById('nextDueDate');

                        if (startDateInput) startDateInput.value = startDate.toISOString().split('T')[0];
                        if (endDateInput) endDateInput.value = endDate.toISOString().split('T')[0];
                        if (amountInput) amountInput.value = data.intperm || '';
                        if (nextDueDateInput) nextDueDateInput.value = nextDueDate.toISOString().split('T')[0];

                        console.log('Form values set:', {
                            startDate: startDateInput ? startDateInput.value : 'N/A',
                            endDate: endDateInput ? endDateInput.value : 'N/A',
                            amount: amountInput ? amountInput.value : 'N/A',
                            nextDueDate: nextDueDateInput ? nextDueDateInput.value : 'N/A'
                        });
                    })
                    .catch(error => console.error('Error:', error));
            });

            // เมื่อกดปุ่มยืนยัน
            confirmExtendButton.addEventListener('click', function() {
                const formData = new FormData(extendPaymentForm);
                const formDataObject = {};
                formData.forEach((value, key) => { formDataObject[key] = value; });

                // ตรวจสอบและแปลงข้อมูลให้ถูกต้อง
                formDataObject.startDate = new Date(formDataObject.startDate).toISOString();
                formDataObject.endDate = new Date(formDataObject.endDate).toISOString();
                formDataObject.nextDueDate = new Date(formDataObject.nextDueDate).toISOString();
                formDataObject.amount = parseFloat(formDataObject.amount);

                console.log('Processed form data:', formDataObject);

                const requiredFields = ['startDate', 'endDate', 'nextDueDate', 'amount'];
                const missingFields = requiredFields.filter(field => !formDataObject[field]);
                
                if (missingFields.length > 0) {
                    alert(`กรุณากรอกข้อมูลให้ครบทุกช่อง: ${missingFields.join(', ')}`);
                    return;
                }
                // เพิ่มการตรวจสอบว่าทุกฟิลด์มีค่า
                if (!formDataObject.startDate || !formDataObject.endDate || !formDataObject.nextDueDate || !formDataObject.amount) {
                    alert('กรุณากรอกข้อมูลให้ครบทุกช่อง');
                    return;
                }

                // ตรวจสอบว่าข้อมูลถูกต้องก่อนส่ง
                if (isNaN(new Date(formDataObject.startDate).getTime()) ||
                    isNaN(new Date(formDataObject.endDate).getTime()) ||
                    isNaN(new Date(formDataObject.nextDueDate).getTime()) ||
                    isNaN(formDataObject.amount)) {
                    alert('กรุณากรอกข้อมูลให้ถูกต้องและครบถ้วน');
                    return;
                }

                console.log('Sending data:', formDataObject);

                fetch(`/payment/extend-payment/${goldId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formDataObject)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'สำเร็จ!',
                            text: 'ต่อดอกเรียบร้อยแล้ว',
                            confirmButtonText: 'ตกลง'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'เกิดข้อผิดพลาด',
                            text: data.message,
                            confirmButtonText: 'ตกลง'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'เกิดข้อผิดพลาด',
                        text: 'เกิดข้อผิดพลาดในการต่อดอก',
                        confirmButtonText: 'ตกลง'
                    });
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            const redeemModal = document.getElementById('redeemModal');
            const redeemForm = document.getElementById('redeemForm');
            const confirmRedeemButton = redeemModal.querySelector('.btn-success');

            function calculateTotal() {
                const startDate = new Date(document.getElementById('redeemStartDate').value);
                const endDate = new Date(document.getElementById('redeemEndDate').value);
                const principal = parseFloat(document.getElementById('initialAmount').value) || 0;
                const interest = parseFloat(document.getElementById('interestAmount').value) || 0;

                const daysDiff = (endDate - startDate) / (1000 * 60 * 60 * 24);
                const totalAmount = principal + (principal * (interest / 100) / 30) * daysDiff;

                document.getElementById('totalAmount').value = totalAmount.toFixed(2);
            }

            redeemModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const goldId = button.getAttribute('data-gold-id');
                console.log('Modal opening for goldId:', goldId);

                if (!goldId) {
                    console.error('goldId is missing');
                    alert('เกิดข้อผิดพลาด: ไม่พบรหัสทอง');
                    return;
                }

                this.setAttribute('data-gold-id', goldId);

                fetch(`/payment/get-latest-data/${goldId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('API Data:', data);
                        if (data.success) {
                            document.getElementById('redeemStartDate').value = data.startDate;
                            
                            // ตั้งค่าวันที่สิ้นสุดเป็นวันที่ปัจจุบันในเวลาท้องถิ่นของ Thailand
                            const now = new Date();
                            const offset = now.getTimezoneOffset() * 60000;
                            const localISOTime = (new Date(now - offset)).toISOString().split('T')[0];
                            document.getElementById('redeemEndDate').value = localISOTime;
                            
                            document.getElementById('initialAmount').value = data.principal;
                            document.getElementById('interestAmount').value = data.interest; // เปลี่ยนจาก intperm เป็น interest
                            calculateTotal();
                        } else {
                            throw new Error(data.message || 'Failed to fetch gold data');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('เกิดข้อผิดพลาดในการดึงข้อมูล: ' + error.message);
                    });
            });

            // เพิ่ม event listener สำหรับการเปลี่ยนแปลงวันที่หรือจำนวนเงิน
            document.getElementById('redeemEndDate').addEventListener('change', calculateTotal);
            document.getElementById('initialAmount').addEventListener('input', calculateTotal);
            document.getElementById('interestAmount').addEventListener('input', calculateTotal);

            // เมื่อกดปุ่มยืนยันการไถ่คืน
            confirmRedeemButton.addEventListener('click', function() {
                const goldId = redeemModal.getAttribute('data-gold-id');
                const formData = new FormData(redeemForm);
                const redeemData = {
                    goldId: goldId,
                    startDate: formData.get('redeemStartDate'),
                    endDate: formData.get('redeemEndDate'),
                    initialAmount: parseFloat(formData.get('initialAmount')),
                    interestAmount: parseFloat(formData.get('interestAmount')),
                    totalAmount: parseFloat(formData.get('totalAmount'))
                };

                fetch('/payment/redeem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(redeemData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('ไถ่คืนเรียบร้อยแล้ว');
                        location.reload();
                    } else {
                        alert('เกิดข้อผิดพลาด: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('เกิดข้อผิดพลาดในการไถ่คืน');
                });
            });

            // เพิ่ม event listener สำหรับการเปลี่ยนแปลงวันที่
            document.getElementById('redeemEndDate').addEventListener('change', calculateTotal);
        });

        document.addEventListener('DOMContentLoaded', function() {
            const extendButton = document.getElementById('extendButton');
            const redeemButton = document.getElementById('redeemButton');
            const goldStatus = '<%= gold.status %>'; // รับค่าสถานะจาก server

            function updateButtonStatus() {
                if (goldStatus === 'ไถ่คืน') {
                    extendButton.disabled = true;
                    extendButton.title = 'ไม่สามารถต่อดอกได้เนื่องจากทองถูกไถ่คืนแล้ว';
                    redeemButton.disabled = true;
                    redeemButton.title = 'ทองถูกไถ่คืนแล้ว';
                }
            }

            updateButtonStatus();

            // Event listeners สำหรับปุ่มต่อดอกและไถ่คืน
            extendButton.addEventListener('click', function(event) {
                if (goldStatus === 'ไถ่คืน') {
                    event.preventDefault();
                    alert('ไม่สามารถต่อดอกได้เนื่องจากทองถูกไถ่คืนแล้ว');
                }
            });

            redeemButton.addEventListener('click', function(event) {
                if (goldStatus === 'ไถ่คืน') {
                    event.preventDefault();
                    alert('ทองถูกไถ่คืนแล้ว');
                }
            });
        });
    </script>
</body>
</html>